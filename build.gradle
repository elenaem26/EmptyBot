plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    jooqCodegen
}

ext.postgresVer = '42.7.4'
ext.jooqVer = '3.19.24'


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.ai:spring-ai-starter-model-openai:1.0.1'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    jooqCodegen "org.jooq:jooq-codegen:${jooqVer}"
    jooqCodegen "org.jooq:jooq-meta-extensions:${jooqVer}"

    implementation("org.telegram:telegrambots-spring-boot-starter:6.9.7.0")
    implementation("org.telegram:telegrambots-abilities:6.9.7.0")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    runtimeOnly    'org.postgresql:postgresql:42.7.4'
    testRuntimeOnly 'org.postgresql:postgresql:42.7.4'
}

tasks.register('generateJooq', JavaExec) {
    group = 'jOOQ'
    description = 'Generate jOOQ from migrations via DDLDatabase'
    classpath = configurations.jooqCodegen
    mainClass = 'org.jooq.codegen.GenerationTool'
    args file('src/main/resources/jooq-config.xml')

    inputs.files fileTree('src/main/resources/db/migration'), file('src/main/resources/jooq-config.xml')
    outputs.dir 'build/generated-src/jooq'

    // чтобы секреты не улетели в build cache
    outputs.cacheIf { false }
}

sourceSets.main.java.srcDir 'build/generated-src/jooq'
tasks.named('compileJava') { dependsOn tasks.named('generateJooq') }


tasks.named('test') {
    useJUnitPlatform()
}

