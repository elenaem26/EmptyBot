buildscript {
    dependencies {
        classpath("org.postgresql:postgresql:42.7.4")
        classpath("org.flywaydb:flyway-database-postgresql:11.7.2")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '11.7.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    flywayMigration
    jooqCodegen
}

configurations {
    flyway {
        extendsFrom configurations.flywayMigration
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.postgresql:postgresql:42.7.4'
    implementation 'org.flywaydb:flyway-core'

    flywayMigration 'org.flywaydb:flyway-database-postgresql:11.7.2'
    flywayMigration 'org.postgresql:postgresql:42.7.4'


    jooqCodegen 'org.jooq:jooq-codegen'
    jooqCodegen 'org.postgresql:postgresql:42.7.4'

    implementation("org.telegram:telegrambots-spring-boot-starter:6.9.7.0")
    implementation("org.telegram:telegrambots-abilities:6.9.7.0")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:postgresql://localhost:5432/postgres'
    user = 'bot'
    password = ''
}

sourceSets {
    main {
        java {
            srcDir 'build/generated-src/jooq'
        }
    }
}

// Генерация jOOQ на основе XML-конфига и актуальной схемы БД
tasks.register('generateJooq', JavaExec) {
    group = 'jOOQ'
    description = 'Generates jOOQ sources from the database schema'
    classpath = configurations.jooqCodegen
    mainClass = 'org.jooq.codegen.GenerationTool'
    args file('src/main/resources/jooq-config.xml')


    // Перед генерацией применяем миграции, чтобы схема была актуальной
    dependsOn tasks.named('flywayMigrate')

    // Инкрементальность: менялись миграции — перегенерируем
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // Выходная директория — как в jooq-config.xml
    outputs.dir('build/generated-src/jooq')
}

tasks.named('compileJava') {
    dependsOn tasks.named('generateJooq')
}

//jooq {
//    configurations {
//        main {
//            generationTool {
//                logging = org.jooq.meta.jaxb.Logging.WARN
//                jdbc {
//                    driver = 'org.postgresql.Driver'
//                    url = 'jdbc:postgresql://localhost:5432/postgres'
//                    user = 'bot'
//                    password = ''
//                }
//                generator {
//                    name = 'org.jooq.codegen.DefaultGenerator'
//                    database {
//                        name = 'org.jooq.meta.postgres.PostgresDatabase'
//                        inputSchema = 'public'
//                        includes = '.*'
//                        excludes = 'flyway_schema_history'
//                    }
//                    target {
//                        packageName = 'botdb'
//                    }
//                }
//            }
//        }
//    }
//}

//// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
//// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
//// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
//// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
//tasks.named('generateJooq').configure {
//    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
//    dependsOn tasks.named('flywayMigrate')
//
//    // declare Flyway migration scripts as inputs on the jOOQ task
//    inputs.files(fileTree('src/main/resources/db/migration'))
//            .withPropertyName('migrations')
//            .withPathSensitivity(PathSensitivity.RELATIVE)
//
//    // make jOOQ task participate in incremental builds (and build caching)
//    allInputsDeclared = true
//}


tasks.named('test') {
    useJUnitPlatform()
}

